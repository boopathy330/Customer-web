{"ast":null,"code":"import { config } from '../Constants';\nimport { authHeader } from '../Utils/auth-header';\n\nconst login = (email, password) => {\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  };\n  return window.fetch(`${config.BASE_URL}/admin/sign-in`, requestOptions).then(handleResponse).then(user => {\n    window.localStorage.setItem('token', user.success.token);\n    window.localStorage.setItem('user', JSON.stringify(user.success.payload));\n    return user.success;\n  });\n};\n\nconst checkAuth = () => {\n  try {\n    const token = window.localStorage.getItem('token');\n    const user = window.localStorage.getItem('user');\n\n    if (token && user) {\n      return {\n        token,\n        user\n      };\n    } else {\n      const token = false;\n      const user = false;\n      return {\n        token,\n        user\n      };\n    }\n  } catch (err) {\n    console.log(err);\n    return Error;\n  }\n};\n\nconst logout = () => {\n  // remove user from local storage to log user out\n  const headers = authHeader();\n  const requestOptions = {\n    method: 'PUT',\n    headers\n  };\n  return window.fetch(`${config.BASE_URL}/users/log-out`, requestOptions).then(handleResponse).then(data => {\n    window.localStorage.removeItem('token');\n    window.localStorage.removeItem('user');\n    return Promise.resolve;\n  });\n};\n\nfunction handleResponse(response) {\n  return response.text().then(text => {\n    const data = text && JSON.parse(text);\n    return data;\n  });\n}\n\nexport const authService = {\n  login,\n  logout,\n  checkAuth\n};","map":{"version":3,"sources":["/home/boopathy/work/learnings/Project/src/Services/auth.service.js"],"names":["config","authHeader","login","email","password","requestOptions","method","headers","body","JSON","stringify","window","fetch","BASE_URL","then","handleResponse","user","localStorage","setItem","success","token","payload","checkAuth","getItem","err","console","log","Error","logout","data","removeItem","Promise","resolve","response","text","parse","authService"],"mappings":"AAAA,SAASA,MAAT,QAAuB,cAAvB;AACA,SAASC,UAAT,QAA2B,sBAA3B;;AAEA,MAAMC,KAAK,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACjC,QAAMC,cAAc,GAAG;AACrBC,IAAAA,MAAM,EAAE,MADa;AAErBC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAFY;AAGrBC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEP,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAf;AAHe,GAAvB;AAKA,SAAOO,MAAM,CACVC,KADI,CACG,GAAEZ,MAAM,CAACa,QAAS,gBADrB,EACsCR,cADtC,EAEJS,IAFI,CAECC,cAFD,EAGJD,IAHI,CAGCE,IAAI,IAAI;AACZL,IAAAA,MAAM,CAACM,YAAP,CAAoBC,OAApB,CAA4B,OAA5B,EAAqCF,IAAI,CAACG,OAAL,CAAaC,KAAlD;AACAT,IAAAA,MAAM,CAACM,YAAP,CAAoBC,OAApB,CAA4B,MAA5B,EAAoCT,IAAI,CAACC,SAAL,CAAeM,IAAI,CAACG,OAAL,CAAaE,OAA5B,CAApC;AACA,WAAOL,IAAI,CAACG,OAAZ;AACD,GAPI,CAAP;AAQD,CAdD;;AAgBA,MAAMG,SAAS,GAAG,MAAM;AACtB,MAAI;AACF,UAAMF,KAAK,GAAGT,MAAM,CAACM,YAAP,CAAoBM,OAApB,CAA4B,OAA5B,CAAd;AACA,UAAMP,IAAI,GAAGL,MAAM,CAACM,YAAP,CAAoBM,OAApB,CAA4B,MAA5B,CAAb;;AACA,QAAIH,KAAK,IAAIJ,IAAb,EAAmB;AACjB,aAAO;AAAEI,QAAAA,KAAF;AAASJ,QAAAA;AAAT,OAAP;AACD,KAFD,MAEO;AACL,YAAMI,KAAK,GAAG,KAAd;AACA,YAAMJ,IAAI,GAAG,KAAb;AACA,aAAO;AAAEI,QAAAA,KAAF;AAASJ,QAAAA;AAAT,OAAP;AACD;AACF,GAVD,CAUE,OAAOQ,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,WAAOG,KAAP;AACD;AACF,CAfD;;AAiBA,MAAMC,MAAM,GAAG,MAAM;AACnB;AACA,QAAMrB,OAAO,GAAGN,UAAU,EAA1B;AACA,QAAMI,cAAc,GAAG;AACrBC,IAAAA,MAAM,EAAE,KADa;AAErBC,IAAAA;AAFqB,GAAvB;AAKA,SAAOI,MAAM,CACVC,KADI,CACG,GAAEZ,MAAM,CAACa,QAAS,gBADrB,EACsCR,cADtC,EAEJS,IAFI,CAECC,cAFD,EAGJD,IAHI,CAGCe,IAAI,IAAI;AACZlB,IAAAA,MAAM,CAACM,YAAP,CAAoBa,UAApB,CAA+B,OAA/B;AACAnB,IAAAA,MAAM,CAACM,YAAP,CAAoBa,UAApB,CAA+B,MAA/B;AACA,WAAOC,OAAO,CAACC,OAAf;AACD,GAPI,CAAP;AAQD,CAhBD;;AAkBA,SAASjB,cAAT,CAAyBkB,QAAzB,EAAmC;AACjC,SAAOA,QAAQ,CAACC,IAAT,GAAgBpB,IAAhB,CAAqBoB,IAAI,IAAI;AAClC,UAAML,IAAI,GAAGK,IAAI,IAAIzB,IAAI,CAAC0B,KAAL,CAAWD,IAAX,CAArB;AACA,WAAOL,IAAP;AACD,GAHM,CAAP;AAID;;AAED,OAAO,MAAMO,WAAW,GAAG;AACzBlC,EAAAA,KADyB;AAEzB0B,EAAAA,MAFyB;AAGzBN,EAAAA;AAHyB,CAApB","sourcesContent":["import { config } from '../Constants'\r\nimport { authHeader } from '../Utils/auth-header'\r\n\r\nconst login = (email, password) => {\r\n  const requestOptions = {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify({ email, password })\r\n  }\r\n  return window\r\n    .fetch(`${config.BASE_URL}/admin/sign-in`, requestOptions)\r\n    .then(handleResponse)\r\n    .then(user => {\r\n      window.localStorage.setItem('token', user.success.token)\r\n      window.localStorage.setItem('user', JSON.stringify(user.success.payload))\r\n      return user.success\r\n    })\r\n}\r\n\r\nconst checkAuth = () => {\r\n  try {\r\n    const token = window.localStorage.getItem('token')\r\n    const user = window.localStorage.getItem('user')\r\n    if (token && user) {\r\n      return { token, user }\r\n    } else {\r\n      const token = false\r\n      const user = false\r\n      return { token, user }\r\n    }\r\n  } catch (err) {\r\n    console.log(err)\r\n    return Error\r\n  }\r\n}\r\n\r\nconst logout = () => {\r\n  // remove user from local storage to log user out\r\n  const headers = authHeader()\r\n  const requestOptions = {\r\n    method: 'PUT',\r\n    headers\r\n  }\r\n\r\n  return window\r\n    .fetch(`${config.BASE_URL}/users/log-out`, requestOptions)\r\n    .then(handleResponse)\r\n    .then(data => {\r\n      window.localStorage.removeItem('token')\r\n      window.localStorage.removeItem('user')\r\n      return Promise.resolve\r\n    })\r\n}\r\n\r\nfunction handleResponse (response) {\r\n  return response.text().then(text => {\r\n    const data = text && JSON.parse(text)\r\n    return data\r\n  })\r\n}\r\n\r\nexport const authService = {\r\n  login,\r\n  logout,\r\n  checkAuth\r\n}\r\n"]},"metadata":{},"sourceType":"module"}