{"ast":null,"code":"export function authHeader() {\n  // return authorization header with jwt token\n  const token = window.sessionStorage.getItem(\"token\");\n\n  if (token) {\n    return {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer \" + token\n    };\n  } else {\n    return {};\n  }\n}\nexport function checkRefresh() {\n  const expiresIn = window.localStorage.getItem(\"expiresIn\");\n  const userName = window.localStorage.getItem(\"username\");\n  const refreshToken = window.localStorage.getItem(\"refreshToken\");\n  console.log(\"am trigged\", refreshToken, expiresIn);\n\n  if (refreshToken && expiresIn) {\n    const exp = new Date(expiresIn);\n    const now = new Date();\n    console.log(\"time\", exp.getTime() < now.getTime());\n\n    if (exp.getTime() < now.getTime()) {\n      console.log(\"am exprired\");\n      const requestOptions = {\n        method: \"POST\",\n        body: JSON.stringify({\n          user_name: userName,\n          refresh_token: refreshToken,\n          grant_type: \"refresh_token\"\n        })\n      };\n      return window.fetch(`http://localhost:3001/v1/user/auth/token`, requestOptions).then(handleResponse).then(result => {\n        window.sessionStorage.setItem(\"token\", result.accessToken);\n        window.localStorage.setItem(\"expiresIn\", result.expiresIn);\n        window.localStorage.setItem(\"userId\", result.userId);\n        window.localStorage.setItem(\"username\", result.username);\n        window.sessionStorage.setItem(\"role\", result.role);\n        return result;\n      });\n    }\n  }\n}\nexport function handleResponse(response) {\n  return response.text().then(text => {\n    const data = text && JSON.parse(text);\n    return data;\n  });\n}","map":{"version":3,"sources":["/home/boopathy/work/learnings/Project/src/Utils/auth-header.js"],"names":["authHeader","token","window","sessionStorage","getItem","Authorization","checkRefresh","expiresIn","localStorage","userName","refreshToken","console","log","exp","Date","now","getTime","requestOptions","method","body","JSON","stringify","user_name","refresh_token","grant_type","fetch","then","handleResponse","result","setItem","accessToken","userId","username","role","response","text","data","parse"],"mappings":"AAAA,OAAO,SAASA,UAAT,GAAsB;AAC3B;AACA,QAAMC,KAAK,GAAGC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,CAA8B,OAA9B,CAAd;;AAEA,MAAIH,KAAJ,EAAW;AACT,WAAO;AACL,sBAAgB,kBADX;AAELI,MAAAA,aAAa,EAAE,YAAYJ;AAFtB,KAAP;AAID,GALD,MAKO;AACL,WAAO,EAAP;AACD;AACF;AAED,OAAO,SAASK,YAAT,GAAwB;AAC7B,QAAMC,SAAS,GAAGL,MAAM,CAACM,YAAP,CAAoBJ,OAApB,CAA4B,WAA5B,CAAlB;AACA,QAAMK,QAAQ,GAAGP,MAAM,CAACM,YAAP,CAAoBJ,OAApB,CAA4B,UAA5B,CAAjB;AACA,QAAMM,YAAY,GAAGR,MAAM,CAACM,YAAP,CAAoBJ,OAApB,CAA4B,cAA5B,CAArB;AACAO,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BF,YAA1B,EAAwCH,SAAxC;;AACA,MAAIG,YAAY,IAAIH,SAApB,EAA+B;AAC7B,UAAMM,GAAG,GAAG,IAAIC,IAAJ,CAASP,SAAT,CAAZ;AAEA,UAAMQ,GAAG,GAAG,IAAID,IAAJ,EAAZ;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBC,GAAG,CAACG,OAAJ,KAAgBD,GAAG,CAACC,OAAJ,EAApC;;AACA,QAAIH,GAAG,CAACG,OAAJ,KAAgBD,GAAG,CAACC,OAAJ,EAApB,EAAmC;AACjCL,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACA,YAAMK,cAAc,GAAG;AACrBC,QAAAA,MAAM,EAAE,MADa;AAErBC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,UAAAA,SAAS,EAAEb,QADQ;AAEnBc,UAAAA,aAAa,EAAEb,YAFI;AAGnBc,UAAAA,UAAU,EAAE;AAHO,SAAf;AAFe,OAAvB;AAQA,aAAOtB,MAAM,CACVuB,KADI,CACG,0CADH,EAC8CR,cAD9C,EAEJS,IAFI,CAECC,cAFD,EAGJD,IAHI,CAGEE,MAAD,IAAY;AAChB1B,QAAAA,MAAM,CAACC,cAAP,CAAsB0B,OAAtB,CAA8B,OAA9B,EAAuCD,MAAM,CAACE,WAA9C;AACA5B,QAAAA,MAAM,CAACM,YAAP,CAAoBqB,OAApB,CAA4B,WAA5B,EAAyCD,MAAM,CAACrB,SAAhD;AACAL,QAAAA,MAAM,CAACM,YAAP,CAAoBqB,OAApB,CAA4B,QAA5B,EAAsCD,MAAM,CAACG,MAA7C;AACA7B,QAAAA,MAAM,CAACM,YAAP,CAAoBqB,OAApB,CAA4B,UAA5B,EAAwCD,MAAM,CAACI,QAA/C;AACA9B,QAAAA,MAAM,CAACC,cAAP,CAAsB0B,OAAtB,CAA8B,MAA9B,EAAsCD,MAAM,CAACK,IAA7C;AACA,eAAOL,MAAP;AACD,OAVI,CAAP;AAWD;AACF;AACF;AAED,OAAO,SAASD,cAAT,CAAwBO,QAAxB,EAAkC;AACvC,SAAOA,QAAQ,CAACC,IAAT,GAAgBT,IAAhB,CAAsBS,IAAD,IAAU;AACpC,UAAMC,IAAI,GAAGD,IAAI,IAAIf,IAAI,CAACiB,KAAL,CAAWF,IAAX,CAArB;AACA,WAAOC,IAAP;AACD,GAHM,CAAP;AAID","sourcesContent":["export function authHeader() {\r\n  // return authorization header with jwt token\r\n  const token = window.sessionStorage.getItem(\"token\");\r\n\r\n  if (token) {\r\n    return {\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: \"Bearer \" + token,\r\n    };\r\n  } else {\r\n    return {};\r\n  }\r\n}\r\n\r\nexport function checkRefresh() {\r\n  const expiresIn = window.localStorage.getItem(\"expiresIn\");\r\n  const userName = window.localStorage.getItem(\"username\");\r\n  const refreshToken = window.localStorage.getItem(\"refreshToken\");\r\n  console.log(\"am trigged\", refreshToken, expiresIn);\r\n  if (refreshToken && expiresIn) {\r\n    const exp = new Date(expiresIn);\r\n\r\n    const now = new Date();\r\n    console.log(\"time\", exp.getTime() < now.getTime());\r\n    if (exp.getTime() < now.getTime()) {\r\n      console.log(\"am exprired\");\r\n      const requestOptions = {\r\n        method: \"POST\",\r\n        body: JSON.stringify({\r\n          user_name: userName,\r\n          refresh_token: refreshToken,\r\n          grant_type: \"refresh_token\",\r\n        }),\r\n      };\r\n      return window\r\n        .fetch(`http://localhost:3001/v1/user/auth/token`, requestOptions)\r\n        .then(handleResponse)\r\n        .then((result) => {\r\n          window.sessionStorage.setItem(\"token\", result.accessToken);\r\n          window.localStorage.setItem(\"expiresIn\", result.expiresIn);\r\n          window.localStorage.setItem(\"userId\", result.userId);\r\n          window.localStorage.setItem(\"username\", result.username);\r\n          window.sessionStorage.setItem(\"role\", result.role);\r\n          return result;\r\n        });\r\n    }\r\n  }\r\n}\r\n\r\nexport function handleResponse(response) {\r\n  return response.text().then((text) => {\r\n    const data = text && JSON.parse(text);\r\n    return data;\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}