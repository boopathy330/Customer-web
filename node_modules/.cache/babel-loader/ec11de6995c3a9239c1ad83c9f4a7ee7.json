{"ast":null,"code":"import { config } from '../Constants';\nimport { authHeader } from '../Utils/auth-header';\n\nconst getProducts = () => {\n  const headers = authHeader();\n  const requestOptions = {\n    method: 'GET',\n    headers\n  };\n  return window.fetch(`${config.BASE_URL}/mock-tests`, requestOptions).then(handleResponse).then(data => {\n    return data.success.payload1;\n  });\n};\n\nfunction handleResponse(response) {\n  return response.text().then(text => {\n    const data = text && JSON.parse(text);\n    return data;\n  });\n}\n\nexport const products = {\n  getProducts\n};","map":{"version":3,"sources":["/home/boopathy/work/learnings/Project/src/Services/products.service.js"],"names":["config","authHeader","getProducts","headers","requestOptions","method","window","fetch","BASE_URL","then","handleResponse","data","success","payload1","response","text","JSON","parse","products"],"mappings":"AAAA,SAASA,MAAT,QAAuB,cAAvB;AACA,SAASC,UAAT,QAA2B,sBAA3B;;AAEA,MAAMC,WAAW,GAAG,MAAM;AACxB,QAAMC,OAAO,GAAGF,UAAU,EAA1B;AACA,QAAMG,cAAc,GAAG;AACrBC,IAAAA,MAAM,EAAE,KADa;AAErBF,IAAAA;AAFqB,GAAvB;AAIA,SAAOG,MAAM,CACVC,KADI,CACG,GAAEP,MAAM,CAACQ,QAAS,aADrB,EACmCJ,cADnC,EAEJK,IAFI,CAECC,cAFD,EAGJD,IAHI,CAGCE,IAAI,IAAI;AACZ,WAAOA,IAAI,CAACC,OAAL,CAAaC,QAApB;AACD,GALI,CAAP;AAMD,CAZD;;AAcA,SAASH,cAAT,CAAyBI,QAAzB,EAAmC;AACjC,SAAOA,QAAQ,CAACC,IAAT,GAAgBN,IAAhB,CAAqBM,IAAI,IAAI;AAClC,UAAMJ,IAAI,GAAGI,IAAI,IAAIC,IAAI,CAACC,KAAL,CAAWF,IAAX,CAArB;AACA,WAAOJ,IAAP;AACD,GAHM,CAAP;AAID;;AAED,OAAO,MAAMO,QAAQ,GAAG;AACtBhB,EAAAA;AADsB,CAAjB","sourcesContent":["import { config } from '../Constants'\r\nimport { authHeader } from '../Utils/auth-header'\r\n\r\nconst getProducts = () => {\r\n  const headers = authHeader()\r\n  const requestOptions = {\r\n    method: 'GET',\r\n    headers\r\n  }\r\n  return window\r\n    .fetch(`${config.BASE_URL}/mock-tests`, requestOptions)\r\n    .then(handleResponse)\r\n    .then(data => {\r\n      return data.success.payload1\r\n    })\r\n}\r\n\r\nfunction handleResponse (response) {\r\n  return response.text().then(text => {\r\n    const data = text && JSON.parse(text)\r\n    return data\r\n  })\r\n}\r\n\r\nexport const products = {\r\n  getProducts\r\n}\r\n"]},"metadata":{},"sourceType":"module"}