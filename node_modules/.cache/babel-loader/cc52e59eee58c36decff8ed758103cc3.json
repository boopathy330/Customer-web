{"ast":null,"code":"export function authHeader() {\n  // return authorization header with jwt token\n  const token = window.localStorage.getItem(\"token\");\n\n  if (token) {\n    return {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer \" + token\n    };\n  } else {\n    return {};\n  }\n}\nexport function checkRefresh() {\n  const expiresIn = window.localStorage.getItem(\"expiresIn\");\n  const userName = window.localStorage.getItem(\"username\");\n  const refreshToken = window.localStorage.getItem(\"refreshToken\");\n  console.log(\"am trigged\", refreshToken, expiresIn);\n\n  if (refreshToken && expiresIn) {\n    const time = new Date(expiresIn); //refresh 5 minutes before token expires in\n\n    time.setMinutes(time.getMinutes - 5);\n    const now = new Date();\n\n    if (time < now) {\n      console.log(\"am exprired\");\n      const headers = authHeader();\n      const requestOptions = {\n        method: \"POST\",\n        headers,\n        body: {\n          user_name: userName,\n          refresh_token: refreshToken,\n          grant_type: \"refresh_token\"\n        }\n      };\n      return window.fetch(`http://localhost:3001/v1/user/auth/token`, requestOptions).then(handleResponse).then(result => {\n        window.sessionStorage.setItem(\"token\", result.accessToken);\n        window.localStorage.setItem(\"expiresIn\", result.expiresIn);\n        window.localStorage.setItem(\"userId\", result.userId);\n        window.localStorage.setItem(\"username\", result.username);\n        window.sessionStorage.setItem(\"role\", result.role);\n        return result;\n      });\n    }\n  }\n}\nexport function handleResponse(response) {\n  return response.text().then(text => {\n    const data = text && JSON.parse(text);\n    return data;\n  });\n}","map":{"version":3,"sources":["/home/boopathy/work/learnings/Project/src/Utils/auth-header.js"],"names":["authHeader","token","window","localStorage","getItem","Authorization","checkRefresh","expiresIn","userName","refreshToken","console","log","time","Date","setMinutes","getMinutes","now","headers","requestOptions","method","body","user_name","refresh_token","grant_type","fetch","then","handleResponse","result","sessionStorage","setItem","accessToken","userId","username","role","response","text","data","JSON","parse"],"mappings":"AAAA,OAAO,SAASA,UAAT,GAAsB;AAC3B;AACA,QAAMC,KAAK,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,OAA5B,CAAd;;AAEA,MAAIH,KAAJ,EAAW;AACT,WAAO;AACL,sBAAgB,kBADX;AAELI,MAAAA,aAAa,EAAE,YAAYJ;AAFtB,KAAP;AAID,GALD,MAKO;AACL,WAAO,EAAP;AACD;AACF;AAED,OAAO,SAASK,YAAT,GAAwB;AAC7B,QAAMC,SAAS,GAAGL,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,WAA5B,CAAlB;AACA,QAAMI,QAAQ,GAAGN,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,UAA5B,CAAjB;AACA,QAAMK,YAAY,GAAGP,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,cAA5B,CAArB;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BF,YAA1B,EAAwCF,SAAxC;;AACA,MAAIE,YAAY,IAAIF,SAApB,EAA+B;AAC7B,UAAMK,IAAI,GAAG,IAAIC,IAAJ,CAASN,SAAT,CAAb,CAD6B,CAE7B;;AACAK,IAAAA,IAAI,CAACE,UAAL,CAAgBF,IAAI,CAACG,UAAL,GAAkB,CAAlC;AACA,UAAMC,GAAG,GAAG,IAAIH,IAAJ,EAAZ;;AACA,QAAID,IAAI,GAAGI,GAAX,EAAgB;AACdN,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACA,YAAMM,OAAO,GAAGjB,UAAU,EAA1B;AACA,YAAMkB,cAAc,GAAG;AACrBC,QAAAA,MAAM,EAAE,MADa;AAErBF,QAAAA,OAFqB;AAGrBG,QAAAA,IAAI,EAAE;AACJC,UAAAA,SAAS,EAAEb,QADP;AAEJc,UAAAA,aAAa,EAAEb,YAFX;AAGJc,UAAAA,UAAU,EAAE;AAHR;AAHe,OAAvB;AASA,aAAOrB,MAAM,CACVsB,KADI,CACG,0CADH,EAC8CN,cAD9C,EAEJO,IAFI,CAECC,cAFD,EAGJD,IAHI,CAGEE,MAAD,IAAY;AAChBzB,QAAAA,MAAM,CAAC0B,cAAP,CAAsBC,OAAtB,CAA8B,OAA9B,EAAuCF,MAAM,CAACG,WAA9C;AACA5B,QAAAA,MAAM,CAACC,YAAP,CAAoB0B,OAApB,CAA4B,WAA5B,EAAyCF,MAAM,CAACpB,SAAhD;AACAL,QAAAA,MAAM,CAACC,YAAP,CAAoB0B,OAApB,CAA4B,QAA5B,EAAsCF,MAAM,CAACI,MAA7C;AACA7B,QAAAA,MAAM,CAACC,YAAP,CAAoB0B,OAApB,CAA4B,UAA5B,EAAwCF,MAAM,CAACK,QAA/C;AACA9B,QAAAA,MAAM,CAAC0B,cAAP,CAAsBC,OAAtB,CAA8B,MAA9B,EAAsCF,MAAM,CAACM,IAA7C;AACA,eAAON,MAAP;AACD,OAVI,CAAP;AAWD;AACF;AACF;AAED,OAAO,SAASD,cAAT,CAAwBQ,QAAxB,EAAkC;AACvC,SAAOA,QAAQ,CAACC,IAAT,GAAgBV,IAAhB,CAAsBU,IAAD,IAAU;AACpC,UAAMC,IAAI,GAAGD,IAAI,IAAIE,IAAI,CAACC,KAAL,CAAWH,IAAX,CAArB;AACA,WAAOC,IAAP;AACD,GAHM,CAAP;AAID","sourcesContent":["export function authHeader() {\r\n  // return authorization header with jwt token\r\n  const token = window.localStorage.getItem(\"token\");\r\n\r\n  if (token) {\r\n    return {\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: \"Bearer \" + token,\r\n    };\r\n  } else {\r\n    return {};\r\n  }\r\n}\r\n\r\nexport function checkRefresh() {\r\n  const expiresIn = window.localStorage.getItem(\"expiresIn\");\r\n  const userName = window.localStorage.getItem(\"username\");\r\n  const refreshToken = window.localStorage.getItem(\"refreshToken\");\r\n  console.log(\"am trigged\", refreshToken, expiresIn);\r\n  if (refreshToken && expiresIn) {\r\n    const time = new Date(expiresIn);\r\n    //refresh 5 minutes before token expires in\r\n    time.setMinutes(time.getMinutes - 5);\r\n    const now = new Date();\r\n    if (time < now) {\r\n      console.log(\"am exprired\");\r\n      const headers = authHeader();\r\n      const requestOptions = {\r\n        method: \"POST\",\r\n        headers,\r\n        body: {\r\n          user_name: userName,\r\n          refresh_token: refreshToken,\r\n          grant_type: \"refresh_token\",\r\n        },\r\n      };\r\n      return window\r\n        .fetch(`http://localhost:3001/v1/user/auth/token`, requestOptions)\r\n        .then(handleResponse)\r\n        .then((result) => {\r\n          window.sessionStorage.setItem(\"token\", result.accessToken);\r\n          window.localStorage.setItem(\"expiresIn\", result.expiresIn);\r\n          window.localStorage.setItem(\"userId\", result.userId);\r\n          window.localStorage.setItem(\"username\", result.username);\r\n          window.sessionStorage.setItem(\"role\", result.role);\r\n          return result;\r\n        });\r\n    }\r\n  }\r\n}\r\n\r\nexport function handleResponse(response) {\r\n  return response.text().then((text) => {\r\n    const data = text && JSON.parse(text);\r\n    return data;\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}